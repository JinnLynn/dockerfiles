#!/bin/bash

ALPINE_VERSION=${ALPINE_VERSION:-edge}
ALPINE_ARCH=${ALPINE_ARCH:-x86_64 armhf}
# ALPINE_LATEST 允许为空
ALPINE_LATEST=${ALPINE_LATEST-}

DRY_RUN=false
PUSH=false
FORCE_BUILD=false
MANIFEST=false
USER=${DOCKER_USER:-}
[[ -z "$USER" ]] && USER=$(docker info 2>/dev/null | grep Username | awk '{print $2}')

# 如果latest不在release中 添加
if [[ -n "$ALPINE_LATEST" ]]; then
    ALPINE_LATEST=${ALPINE_LATEST#v}
    echo "${ALPINE_VERSION[@]}" | grep -q "$ALPINE_LATEST" || ALPINE_VERSION="$ALPINE_VERSION $ALPINE_LATEST"
fi


DOCKERFILE=$(dirname $0)/alpine/Dockerfile

TAG_BASE="alpine"

. $(realpath $(dirname $0))/_scripts/common.sh

# $1 alpine version
# $2 arch
build() {
    local ver=$1
    local arch=$2
    ver=${ver#v}

    local branch=$ver
    [[ $branch != "edge" && $branch != "latest-stable" ]] && branch="v$ver"

    echo_green_split "Build Alpine $branch $arch"

    local suite=$ver-$(arch_go_mark $arch)

    local cur_tag=$TAG_BASE:$suite

    local build_opt=
    is_true $FORCE_BUILD && build_opt="$build_opt --no-cache"

    run_cmd docker build --rm --force-rm --network=host $build_opt \
            --build-arg BRANCH=$branch --build-arg ARCH=$arch \
            -t $cur_tag -f $DOCKERFILE $(dirname $DOCKERFILE)
    push $cur_tag

    [[ "$ver" == "$ALPINE_LATEST" ]] && {
        # Latest版本 标记为架构标签
        local latest_tag="$TAG_BASE:$(arch_go_mark $arch)"
        echo_green_split "Latest version, Tag to: $latest_tag"
        run_cmd docker tag $cur_tag $latest_tag
        push $latest_tag

        # 如果是架构与当前环境相同 则直接tag为latest
        if [[ "$(arch_go_mark $arch)" == "$(arch_go_mark)" ]]; then
            echo_green_split "Latest version and same arch, Tag to: $TAG_BASE"
            run_cmd docker tag $cur_tag $TAG_BASE
        fi
    }

    # 平台相同 标记为版本
    if [[ "$(arch_go_mark $arch)" == "$(arch_go_mark)" ]]; then
        local ver_tag=$TAG_BASE:$ver
        echo_green_split "Same arch, Tag to: $ver_tag"
        run_cmd docker tag $cur_tag $ver_tag
    fi
}

# $1 tag
push() {
    ! is_true $PUSH && return 1

    local tag=$1

    echo_green_split "Pushing $tag"
    local n=0
    local pushed=
    until [ $n -ge 5 ]; do
        run_cmd docker push $tag && {
            echo_green_split "Successfully push $tag"
            pushed=1
            break
        }
        echo "Try #$n failed... sleeping for 5 seconds"
        n=$[$n+1]
        sleep 5
    done
    [[ -z "$pushed" ]] && echo_red_split "Push $tag fail."
}

manifest() {
    local ver=$1
    ver=${ver#v}

    local platforms=
    for arch in $ALPINE_ARCH; do
        platforms="$platforms,linux/$(arch_go_mark $arch)"
    done
    platforms=${platforms#,}

    echo_green_split "Push manifest list: $ver"
    run_cmd manifest-tool --debug push from-args \
        --platforms $platforms \
        --template $TAG_BASE:$ver-ARCH \
        --target $TAG_BASE:$ver
    echo

    # 如果是最终版本
    [[ "$ver" == "$ALPINE_LATEST" ]] && {
            echo_green_split "Latest version, Push manifest list: latest"
            run_cmd manifest-tool --debug push from-args \
            --platforms $platforms \
            --template $TAG_BASE:$ver-ARCH \
            --target $TAG_BASE
            echo
    }
}


while (( ${#} )); do
    case "$1" in
        --user|-u )
            shift 1
            USER=${1:-}
            # 允许USER为空
            check_param "--user|-u" $USER true
            ;;
        --push|-p )
            PUSH=true
            ;;
        --manifest|-m)
            MANIFEST=true
            # 必须push
            PUSH=true
            ;;
        --force|-f )
            FORCE_BUILD=true
            ;;
        --dry-run|-d)
            DRY_RUN=true
            ;;
        -* )
            exit_err "错误的选项: $1"
            ;;
        * )
            # 参数结束
            break
            ;;
    esac
    shift 1
done

[[ -n "$USER" ]] && TAG_BASE="$USER/$TAG_BASE"

echo
echo "VERSION:      $ALPINE_VERSION"
echo "ARCH:         $ALPINE_ARCH"
echo "LATEST:       $ALPINE_LATEST"
echo "USER:         $USER"
echo "PUSH:         $PUSH"
echo "MANIFEST:     $MANIFEST"
echo "FORCE_BUILD:  $FORCE_BUILD"
echo "DRY_RUN:      $DRY_RUN"
echo "CURRENT:      $(arch_go_mark)"
echo

for ver in $ALPINE_VERSION; do
    for arch in $ALPINE_ARCH; do
        build $ver $arch
        echo
        echo
    done
    is_true $MANIFEST && manifest $ver
    echo
done
