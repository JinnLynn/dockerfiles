#!/bin/bash
# REF: https://github.com/jessfraz/dockerfiles/blob/master/build-all.sh

user="jinnlynn"
arch=""
single=""
push=
verbose=
force_build=

base_dir=$(realpath $(dirname $0))

# arm
machine=$(uname -m)
[[ "${machine:0:4}" == "armv" ]] && arch="armhf"

echo_red() {
    echo -e "\033[31m$@\033[0m"
}

echo_green() {
    echo -e "\033[32m$@\033[0m"
}

echo_split() {
    local start=
    if [[ -n "$@" ]]; then
        echo "================================================="
        echo "\n$@"
        start="\n"
    fi
    echo "$start================================================="
}

is_ignored() {
    local type=$1
    local image=$2
    local tag=$3
    cat $base_dir/.buildignore 2>/dev/null | grep -q -e "^$type,$image\$" -e "^$type,$tag\$"
}

build() {
    local f=$1
    local dockerfile=$(basename $f)
    local build_dir=$(dirname $f)
    local image=${build_dir%%\/*}
    suite=${build_dir##*\/}

    [[ "$suite" == "$build_dir" ]] && suite=""
    suite=${suite:=latest}
    [[ -n "$arch" ]] &&  {
        [[ "$suite" == "latest" ]] && suite=$arch || suite="$arch-$suite"
    }

    local tag="$image:$suite"
    [[ -n "$user" ]] && tag="$user/$tag"

    echo_green "Building $tag for context $image[$dockerfile]"
    echo_green $(echo_split)
    if [[ -n "$verbose" ]]; then
        echo_green "filepath:   $f"
        echo_green "build_dir:  $build_dir"
        echo_green "dockerfile: $dockerfile"
        echo_green "image:      $image"
        echo_green "arch:       $arch"
        echo_green "suite:      $suite"
        echo_green "tag:        $tag"
        echo_green $(echo_split)
    fi

    if is_ignored B $image $tag; then
        echo_red $(echo_split "Build $tag ignored.")
        return 0
    fi

    local build_opt=
    [[ -n "$force_build" ]] && build_opt="--no-cache"
    if docker build --rm --force-rm --network=host $build_opt -t $tag -f $f $build_dir; then
        echo_green $(echo_split "Successfully built $tag with context $image")
        if [[ -n "$push" ]]; then
            push "$image" "$suite"
        fi
    else
        echo_red $(echo_split "Build $tag with context $image fail.")
    fi
    echo
    echo
}

push() {
    local image=$1
    local suite=$2
    local tag="$image:$suite"

    if is_ignored P $image $tag; then
        echo_red $(echo_split "Push $tag ignored.")
        return 0
    fi

    [[ -n "$user" ]] && tag="$user/$tag"
    echo_green $(echo_split "Pushing $tag")
    local n=0
    local pushed=
    until [ $n -ge 5 ]; do
        docker push $tag && {
            echo_green $(echo_split "Successfully push $tag")
            pushed=1
            break
        }
        echo "Try #$n failed... sleeping for 15 seconds"
        n=$[$n+1]
        sleep 5
    done
    [[ -z "$pushed" ]] && echo_red $(echo_split "Push $tag fail.")
}

build_all () {
    IFS=$'\n'
    local dockerfile="Dockerfile"
    [[ -n "$arch" ]] && dockerfile="$dockerfile.$arch"
    files=$(find . -maxdepth 3 ! -ipath '.\/[~\._]*' -iname $dockerfile | sed 's|./||' | sort)
    unset IFS

    cur=$(pwd)
    for f in ${files[@]}; do
        cd $cur
        build "$f"
    done
}

build_single() {
    local dockerfile=$1
    [[ -d "$dockerfile" ]] && {
        dockerfile="$dockerfile/Dockerfile"
        [[ -n $arch ]] && dockerfile="$dockerfile.$arch"
    }

    [[ ! -f "$dockerfile" ]] && {
        echo_red $(echo_split "$1 missing")
        echo
        return 1
    }

    build "$dockerfile"
}

usage="USAGE: $0 [-u USER] [-a ARCH] [-p] [-v] [DOCKERFILE ...]"
while getopts ":u:a:pbv" opt 2>/dev/null; do
    case $opt in
        u)
            user=$OPTARG
            ;;
        a)
            arch=$OPTARG
            ;;
        p)
            push=1
            ;;
        b)
            force_build=1
            ;;
        v)
            verbose=1
            ;;
        \:)
            echo "Option argument missing: ${@:OPTIND-1:1}." 1>&2
            echo $usage
            exit 1
            ;;
        \?)
            echo "Invalid option: ${@:OPTIND-1:1}." 1>&2
            echo $usage
            exit 1
            ;;
    esac
done
shift $((OPTIND-1))


[[ -n "$verbose" ]] && {
    echo
    echo "USER:        $user"
    echo "ARCH:        $arch"
    echo "PUSH:        $push"
    echo "FORCE_BUILD: $force_build"
    echo "FILE/DIR:    $@"
    echo
}


pushd "$base_dir" >/dev/null
if [[ $# -eq 0 ]]; then
    build_all
else
    cur=$(pwd)
    while [ $# -gt 0 ]; do
        cd $cur
        build_single $1
        shift $(( $# > 0 ? 1 : 0 ))
    done
fi
popd >/dev/null
